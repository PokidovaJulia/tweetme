{"version":3,"sources":["logo.svg","lookup/components.js","tweets/lookup.js","tweets/buttons.js","profiles/components.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/feed.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","send","apiTweetFeed","nextUrl","undefined","replace","apiTweetList","username","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","console","log","type","onClick","event","preventDefault","tweetID","id","apiTweetAction","UserLink","children","UserDisplay","user","nameDisplay","includeFullName","first_name","last_name","Fragment","UserPicture","ParentTweet","parent","Tweet","isRetweet","retweeter","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","next","results","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","FeedList","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","tweetId","didLookup","setDidLookup","setTweet","handleBackendLookup","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","tweetFeedEl","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47bb0033.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n          const cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\n\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data) {\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url = `http://localhost:8000/api${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken')\r\n  xhr.open(method, url)\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n  \r\n    if (csrftoken){\r\n      xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n      xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n      xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    }\r\n  \r\n  xhr.onload = function() {\r\n    if (xhr.status === 403) {\r\n      const detail = xhr.response.detail\r\n      if (detail === \"Authentication credentials were not provided.\") {\r\n        if (window.location.href.indexOf(\"login\") === -1) {\r\n          window.location.href = \"/login?showLoginRequired=true\"\r\n        } \r\n      }\r\n    }\r\n      callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function (e) {\r\n    callback({\"message\": \"the request was an error\"}, 400)\r\n  }\r\n\r\n  xhr.send(jsonData)\r\n}\r\n\r\n","import {backendLookup} from '../lookup'\r\n\r\nexport function apiTweetFeed(callback, nextUrl) {\r\n    let endpoint = \"/tweets/feed/\"\r\n    if (nextUrl !== null && nextUrl !== undefined) {\r\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\r\n    }\r\n    backendLookup(\"GET\", endpoint, callback)\r\n}\r\n\r\nexport function apiTweetCreate(newTweet, callback) {\r\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\r\n}\r\n\r\nexport function apiTweetAction(tweetID, action, callback) {\r\n    const data = {id: tweetID, action: action}\r\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\r\n}\r\n\r\nexport function apiTweetDetail(tweetID, callback) {\r\n    backendLookup(\"GET\", `/tweets/${tweetID}/`, callback)\r\n}\r\n\r\nexport function apiTweetList(username, callback, nextUrl) {\r\n    let endpoint = \"/tweets/\"\r\n    if (username) {\r\n        endpoint = `/tweets/?username=${username}`\r\n    }\r\n    if (nextUrl !== null && nextUrl !== undefined) {\r\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\r\n    }\r\n    backendLookup(\"GET\", endpoint, callback)\r\n}","import React from 'react';\r\n\r\nimport {apiTweetAction} from './lookup'\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action, didPerformAction} = props\r\n    const likes = tweet.likes ? tweet.likes : 0\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    \r\n    const handleActionBackendEvent = (response, status) => {\r\n        console.log(response, status)\r\n        if ((status === 200 || status === 201) && didPerformAction) {\r\n            didPerformAction(response, status)\r\n        }\r\n    }\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\r\n        \r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}","import React from 'react';\r\n\r\n\r\nexport function UserLink (props) {\r\n    const {username} = props\r\n    const handleUserLink = (event) => {\r\n        window.location.href = `/profiles/${username}`\r\n    }\r\n    return <span className='pointer' onClick={handleUserLink}>\r\n        {props.children}\r\n    </span>\r\n}\r\n\r\nexport function UserDisplay (props) {\r\n    const {user, includeFullName} = props\r\n    const nameDisplay = includeFullName === true ? `${user.first_name} ${user.last_name} ` : null\r\n\r\n    return <React.Fragment>\r\n        {nameDisplay}\r\n        <UserLink username={user.username}>@{user.username}</UserLink>\r\n    </React.Fragment>\r\n}\r\n\r\nexport function UserPicture (props) {\r\n    const {user} = props\r\n    return <UserLink username={user.username}> <span className='mx-1 px-3 py-2 rounded-circle bg-dark text-white'>\r\n        {user.username[0]}\r\n    </span></UserLink>\r\n}","import React, {useState} from 'react';\r\n\r\nimport {ActionBtn} from './buttons'\r\n\r\nimport {\r\n    UserDisplay,\r\n    UserPicture\r\n} from '../profiles'\r\n\r\nexport function ParentTweet(props) {\r\n    const {tweet} = props\r\n    return tweet.parent ? <Tweet isRetweet retweeter={props.retweeter} hideActions className={' '} tweet={tweet.parent} /> : null\r\n}\r\n\r\nexport function Tweet(props) {\r\n    const {tweet, didRetweet, hideActions, isRetweet, retweeter} = props\r\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\r\n    let className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    className = isRetweet === true ? `${className} p-2 border rounded` : className\r\n    const path = window.location.pathname\r\n    const match = path.match(/(?<tweetid>\\d+)/)\r\n    const urlTweetId = match ? match.groups.tweetid : -1\r\n        \r\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\r\n    const handleLink = (event) => {\r\n        event.preventDefault()\r\n        window.location.href = `/${tweet.id}`\r\n    }\r\n    const handlePerformAction = (newActionTweet, status) => {\r\n        if (status === 200) {\r\n            setActionTweet(newActionTweet)\r\n        } else if (status === 201) {\r\n            if (didRetweet) {\r\n                didRetweet(newActionTweet)\r\n            }\r\n        }\r\n    }\r\n\r\n    return <div className={className}>\r\n        {isRetweet === true && <div className='mb-2'>\r\n            <span className='small text-muted'>Retweet via <UserDisplay user={retweeter} /></span>\r\n        </div>}\r\n        <div className='d-flex'>\r\n            <div className=''>\r\n                <UserPicture user={tweet.user} />\r\n            </div>\r\n            <div className='col-11'>\r\n                <div>\r\n                    <p>\r\n                        <UserDisplay includeFullName user={tweet.user} />\r\n                    </p>\r\n                    <p>{tweet.content}</p>\r\n                    \r\n                    <ParentTweet tweet={tweet} retweeter={tweet.user} />\r\n                </div>\r\n            <div className='btn btn-group px-0'>\r\n            {(actionTweet && hideActions !== true) && <React.Fragment>\r\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"like\", display: \"Likes\"}} />\r\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"unlike\", display: \"Unlike\"}} />\r\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"retweet\", display: \"Retweet\"}} />\r\n                    </React.Fragment>\r\n            }\r\n                    {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n                </div>\r\n            </div>\r\n        \r\n</div>\r\n</div>\r\n}","import React, {useEffect, useState} from 'react';\r\n\r\nimport {apiTweetList} from './lookup'\r\nimport {Tweet} from './detail'\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    const [nextUrl, setNextUrl] = useState(null)\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final)\r\n        }    \r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n        if (tweetsDidSet === false) {\r\n            const handleTweetListLookup = (response, status) => {\r\n                if (status === 200) {\r\n                    setNextUrl(response.next)\r\n                    setTweetsInit(response.results)\r\n                    setTweetsDidSet(true)\r\n                } else {\r\n                    alert(\"there was an error\")\r\n                }\r\n            }\r\n            apiTweetList(props.username, handleTweetListLookup)\r\n        }\r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        const updateTweetsInit = [...tweetsInit]\r\n        updateTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updateTweetsInit)\r\n        const updateFinalTweets = [...tweets]\r\n        updateFinalTweets.unshift(tweets)\r\n        setTweets(updateFinalTweets)\r\n    }\r\n\r\n    const handleLoadNext = (event) => {\r\n        event.preventDefault()\r\n        if (nextUrl !== null) {\r\n            const handleLoadNextResponse = (response, status) =>{\r\n                if (status === 200) {\r\n                    setNextUrl(response.next)\r\n                    const newTweets = [...tweets].concat(response.results)\r\n                    setTweetsInit(newTweets)\r\n                    setTweets(newTweets)\r\n                } else {\r\n                    alert(\"there was an error\")\r\n                }\r\n            }\r\n            apiTweetList(props.username, handleLoadNextResponse, nextUrl)\r\n        }\r\n    }\r\n\r\n    return <React.Fragment>{tweets.map((item, index) => {\r\n        return <Tweet\r\n        tweet={item}\r\n        didRetweet={handleDidRetweet}\r\n        className='my-5 py-5 border bg-white text-dark'\r\n        key={`${index}-{item.id}`} />\r\n    })}\r\n    { nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button> }\r\n    </React.Fragment>\r\n}\r\n","import React from 'react';\r\n\r\nimport {apiTweetCreate} from './lookup'\r\n\r\nexport function TweetCreate(props){\r\n    const textAreaRef = React.createRef()\r\n    const {didTweet} = props\r\n    const handleBackendUpdate = (response, status) => {\r\n        if (status === 201) { \r\n            didTweet(response)   \r\n        } else {\r\n            console.log(response)\r\n            alert(\"An error occured pleasw try again\")\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        // backend api request\r\n        apiTweetCreate(newVal, handleBackendUpdate)\r\n        textAreaRef.current.value = ''\r\n    }\r\n\r\n    return <div className={props.className}>\r\n        \r\n            <form onSubmit={handleSubmit}>\r\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'></textarea>\r\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n    </div>\r\n}","import React, {useEffect, useState} from 'react';\r\n\r\nimport {apiTweetFeed} from './lookup'\r\nimport {Tweet} from './detail'\r\n\r\nexport function FeedList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    const [nextUrl, setNextUrl] = useState(null)\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final)\r\n        }    \r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n        if (tweetsDidSet === false) {\r\n            const handleTweetListLookup = (response, status) => {\r\n                if (status === 200) {\r\n                    setNextUrl(response.next)\r\n                    setTweetsInit(response.results)\r\n                    setTweetsDidSet(true)\r\n                }\r\n            }\r\n            apiTweetFeed(handleTweetListLookup)\r\n        }\r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        const updateTweetsInit = [...tweetsInit]\r\n        updateTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updateTweetsInit)\r\n        const updateFinalTweets = [...tweets]\r\n        updateFinalTweets.unshift(tweets)\r\n        setTweets(updateFinalTweets)\r\n    }\r\n\r\n    const handleLoadNext = (event) => {\r\n        event.preventDefault()\r\n        if (nextUrl !== null) {\r\n            const handleLoadNextResponse = (response, status) =>{\r\n                if (status === 200) {\r\n                    setNextUrl(response.next)\r\n                    const newTweets = [...tweets].concat(response.results)\r\n                    setTweetsInit(newTweets)\r\n                    setTweets(newTweets)\r\n                }\r\n            }\r\n            apiTweetFeed(handleLoadNextResponse, nextUrl)\r\n        }\r\n    }\r\n\r\n    return <React.Fragment>{tweets.map((item, index) => {\r\n        return <Tweet\r\n        tweet={item}\r\n        didRetweet={handleDidRetweet}\r\n        className='my-5 py-5 border bg-white text-dark'\r\n        key={`${index}-{item.id}`} />\r\n    })}\r\n    { nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button> }\r\n    </React.Fragment>\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nimport {TweetsList} from './list'\r\nimport {Tweet} from './detail'\r\nimport {apiTweetDetail} from './lookup'\r\nimport {TweetCreate} from './create'\r\nimport {FeedList} from './feed'\r\n\r\nexport function FeedComponent(props) {\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const canTweet = props.canTweet === \"false\" ? false : true\r\n    const handleNewTweet = (newTweet) => {\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift(newTweet)\r\n        setNewTweets(tempNewTweets)\r\n    }\r\n    return <div className={props.className}>\r\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\r\n    <FeedList newTweets={newTweets} {...props} />\r\n    </div>\r\n}\r\n\r\nexport function TweetsComponent(props) {\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const canTweet = props.canTweet === \"false\" ? false : true\r\n    const handleNewTweet = (newTweet) => {\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift(newTweet)\r\n        setNewTweets(tempNewTweets)\r\n    }\r\n    return <div className={props.className}>\r\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\r\n    <TweetsList newTweets={newTweets} {...props} />\r\n    </div>\r\n}\r\n\r\nexport function TweetDetailComponent(props){\r\n    const {tweetId} = props\r\n    const [didLookup, setDidLookup] = useState(false)\r\n    const [tweet, setTweet] = useState(null)\r\n    const handleBackendLookup = (response, status) => {\r\n        if (status === 200) {\r\n            setTweet(response)\r\n        } else {\r\n            alert(\"there was an error finding your tweet\")\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        if (didLookup === false){\r\n            apiTweetDetail(tweetId, handleBackendLookup)\r\n            setDidLookup(true)\r\n        }\r\n    }, [tweetId, didLookup, setDidLookup])\r\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\n\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {FeedComponent, TweetsComponent, TweetDetailComponent} from './tweets'\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(\n      <App />, appEl\n  );\n}\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n  ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetFeedEl = document.getElementById(\"tweetme-2-feed\")\nif (tweetFeedEl) {\n  ReactDOM.render(e(FeedComponent, tweetFeedEl.dataset), tweetFeedEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\ntweetDetailElements.forEach(container=> {\n  ReactDOM.render(e(TweetDetailComponent, container.dataset),container);\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n//</React.StrictMode>"],"sourceRoot":""}